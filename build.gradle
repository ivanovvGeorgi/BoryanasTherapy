plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot dependencies (MVC)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'  // for MVC (Web)
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // Mail and Validation dependencies
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.apache.commons:commons-email:1.5'

    // Lombok (for code generation)
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Database dependencies
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Explicitly add byte-buddy-agent for coverage (if needed)
    testImplementation 'net.bytebuddy:byte-buddy-agent:latest.release'
}

tasks.named('test') {
    useJUnitPlatform()
    jvmArgs += "-javaagent:${configurations.testRuntimeClasspath.filter { it.name.contains('byte-buddy-agent') }.singleFile}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperty 'file.encoding', 'UTF-8'
}

tasks.withType(Jar) {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Encoding': 'UTF-8'
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

processResources {
    filteringCharset = 'UTF-8'
}
